import React__default from 'react';
import { l as labelStyles } from './label-size-BLtICllx.mjs';

declare const checkboxLabelStyles: {
    weight: {
        readonly normal: "font-normal";
        readonly medium: "font-medium";
        readonly semibold: "font-semibold";
        readonly bold: "font-bold";
    };
    size: {
        readonly sm: "text-xs mb-1";
        readonly md: "text-sm mb-1.5";
        readonly lg: "text-sm mb-1.5";
        readonly xl: "text-base mb-2";
    };
    margin: {
        left: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        right: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
};
declare const checkboxStyles: {
    base: string;
    disabled: string;
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    activeIcon: string;
    variant: {
        outline: string;
        flat: string;
    };
    indeterminate: {
        base: string;
        icon: string;
        size: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
};
interface CheckboxProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size'> {
    /** The variants of the component are: */
    variant?: keyof typeof checkboxStyles.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof checkboxStyles.size;
    /** Set font weight for label */
    labelWeight?: keyof typeof labelStyles.weight;
    /** The rounded variants are: */
    rounded?: keyof typeof checkboxStyles.rounded;
    /** Available directions of the label are: */
    labelPlacement?: keyof typeof checkboxLabelStyles.margin;
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Use iconClassName prop to apply some additonal style for check mark icon */
    iconClassName?: string;
    /** Use labelClassName prop to apply some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for the input filed extra style */
    inputClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
    /** Add custom classes to the root of the component */
    className?: string;
    /** This prop is used to determine whether the checkbox is in an indeterminate state */
    indeterminate?: boolean;
}
declare const Checkbox: React__default.ForwardRefExoticComponent<CheckboxProps & React__default.RefAttributes<HTMLInputElement>>;

export { Checkbox, type CheckboxProps };
