import * as react_jsx_runtime from 'react/jsx-runtime';
import React__default, { ReactElement } from 'react';
import { Placement } from '@floating-ui/react';

declare function PopoverTrigger({ children, }: {
    children: ReactElement & {
        ref?: React__default.RefObject<any>;
    };
}): react_jsx_runtime.JSX.Element;
declare namespace PopoverTrigger {
    var displayName: string;
}

declare const popoverStyles: {
    base: string;
    arrow: string;
    shadow: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        readonly none: "rounded-none";
        readonly sm: "rounded-sm";
        readonly md: "rounded-md";
        readonly lg: "rounded-lg";
        readonly pill: "rounded-full";
    };
};
type Shadow = keyof typeof popoverStyles.shadow;
type Size = keyof typeof popoverStyles.size;
type Rounded = keyof typeof popoverStyles.rounded;
type PopoverContentProps = {
    children: React__default.ReactNode | (({ open, setOpen, }: {
        open: boolean;
        setOpen: React__default.Dispatch<React__default.SetStateAction<boolean>>;
    }) => React__default.ReactNode);
    className?: string;
};
declare function PopoverContent({ children, className }: PopoverContentProps): react_jsx_runtime.JSX.Element;
declare namespace PopoverContent {
    var displayName: string;
}

declare const tooltipAnimation: {
    fadeIn: {
        initial: {
            opacity: number;
        };
        close: {
            opacity: number;
        };
    };
    zoomIn: {
        initial: {
            opacity: number;
            transform: string;
        };
        close: {
            opacity: number;
            transform: string;
        };
    };
    slideIn: {
        initial: {
            opacity: number;
            transform: string;
        };
        close: {
            opacity: number;
            transform: string;
        };
    };
};
type CommonTypes = {
    showArrow?: boolean;
    enableOverlay?: boolean;
    size?: Size;
    shadow?: Shadow;
    rounded?: Rounded;
    arrowClassName?: string;
    overlayClassName?: string;
};
type PopoverProviderProps = {
    isOpen?: boolean;
    setIsOpen?: React__default.Dispatch<React__default.SetStateAction<boolean>>;
    placement?: Placement;
    animation?: keyof typeof tooltipAnimation;
    gap?: number;
} & CommonTypes;

type PopoverProps = {} & PopoverProviderProps;
declare function Popover({ isOpen, setIsOpen, gap, animation, placement, enableOverlay, showArrow, size, shadow, rounded, arrowClassName, overlayClassName, children, }: React__default.PropsWithChildren<PopoverProps>): react_jsx_runtime.JSX.Element;
declare namespace Popover {
    var Trigger: typeof PopoverTrigger;
    var Content: typeof PopoverContent;
    var displayName: string;
}

export { Popover, type PopoverProps };
