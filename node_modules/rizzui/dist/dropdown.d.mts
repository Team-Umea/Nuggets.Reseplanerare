import * as react_jsx_runtime from 'react/jsx-runtime';
import React__default from 'react';
import { MenuItemsProps, Menu } from '@headlessui/react';
import { E as ExtractProps } from './extract-props-Dt89k7WT.mjs';
import { d as dropdownStyles } from './dropdown-list-style-D3U7Mqrm.mjs';

type DropdownMenuProps = {
    className?: string;
    anchorWidth?: boolean;
} & MenuItemsProps;
declare function DropdownMenu({ className, children, anchorWidth, ...props }: React__default.PropsWithChildren<DropdownMenuProps>): react_jsx_runtime.JSX.Element;
declare namespace DropdownMenu {
    var displayName: string;
}

type Align = 'start' | 'end';
type Side = 'top' | 'right' | 'bottom' | 'left';
type TheirPlacementType = `${Side}` | `${Side}-${Align}`;

type DropdownProps = ExtractProps<typeof Menu> & {
    gap?: number;
    modal?: boolean;
    inPortal?: boolean;
    placement?: TheirPlacementType;
    rounded?: keyof typeof dropdownStyles.rounded;
    shadow?: keyof typeof dropdownStyles.shadow;
    children: React__default.ReactNode;
    className?: string;
};
declare function Dropdown({ inPortal, modal, placement, gap, rounded, shadow, children, className, }: DropdownProps): react_jsx_runtime.JSX.Element;
declare namespace Dropdown {
    var Trigger: React__default.ForwardRefExoticComponent<{
        hidden?: boolean | undefined | undefined;
        form?: string | undefined | undefined;
        slot?: string | undefined | undefined;
        style?: React__default.CSSProperties | undefined;
        title?: string | undefined | undefined;
        onClick?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        suppressHydrationWarning?: boolean | undefined | undefined;
        defaultChecked?: boolean | undefined | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined | undefined;
        formAction?: string | ((formData: FormData) => void | Promise<void>) | undefined;
        formEncType?: string | undefined | undefined;
        formMethod?: string | undefined | undefined;
        formNoValidate?: boolean | undefined | undefined;
        formTarget?: string | undefined | undefined;
        value?: string | number | readonly string[] | undefined;
        content?: string | undefined | undefined;
        key?: React__default.Key | null | undefined;
        accessKey?: string | undefined | undefined;
        autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {}) | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | "plaintext-only" | undefined;
        contextMenu?: string | undefined | undefined;
        dir?: string | undefined | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined | undefined;
        id?: string | undefined | undefined;
        lang?: string | undefined | undefined;
        nonce?: string | undefined | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined | undefined;
        translate?: "yes" | "no" | undefined | undefined;
        radioGroup?: string | undefined | undefined;
        role?: React__default.AriaRole | undefined;
        about?: string | undefined | undefined;
        datatype?: string | undefined | undefined;
        inlist?: any;
        prefix?: string | undefined | undefined;
        property?: string | undefined | undefined;
        rel?: string | undefined | undefined;
        resource?: string | undefined | undefined;
        rev?: string | undefined | undefined;
        typeof?: string | undefined | undefined;
        vocab?: string | undefined | undefined;
        autoCorrect?: string | undefined | undefined;
        autoSave?: string | undefined | undefined;
        color?: string | undefined | undefined;
        itemProp?: string | undefined | undefined;
        itemScope?: boolean | undefined | undefined;
        itemType?: string | undefined | undefined;
        itemID?: string | undefined | undefined;
        itemRef?: string | undefined | undefined;
        results?: number | undefined | undefined;
        security?: string | undefined | undefined;
        unselectable?: "on" | "off" | undefined | undefined;
        popover?: "" | "auto" | "manual" | undefined | undefined;
        popoverTargetAction?: "toggle" | "show" | "hide" | undefined | undefined;
        popoverTarget?: string | undefined | undefined;
        inert?: boolean | undefined | undefined;
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined | undefined;
        is?: string | undefined | undefined;
        "aria-activedescendant"?: string | undefined | undefined;
        "aria-atomic"?: (boolean | "true" | "false") | undefined;
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
        "aria-braillelabel"?: string | undefined | undefined;
        "aria-brailleroledescription"?: string | undefined | undefined;
        "aria-busy"?: (boolean | "true" | "false") | undefined;
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-colcount"?: number | undefined | undefined;
        "aria-colindex"?: number | undefined | undefined;
        "aria-colindextext"?: string | undefined | undefined;
        "aria-colspan"?: number | undefined | undefined;
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
        "aria-describedby"?: string | undefined | undefined;
        "aria-description"?: string | undefined | undefined;
        "aria-details"?: string | undefined | undefined;
        "aria-disabled"?: (boolean | "true" | "false") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
        "aria-errormessage"?: string | undefined | undefined;
        "aria-flowto"?: string | undefined | undefined;
        "aria-grabbed"?: (boolean | "true" | "false") | undefined;
        "aria-hidden"?: (boolean | "true" | "false") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
        "aria-keyshortcuts"?: string | undefined | undefined;
        "aria-label"?: string | undefined | undefined;
        "aria-labelledby"?: string | undefined | undefined;
        "aria-level"?: number | undefined | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
        "aria-modal"?: (boolean | "true" | "false") | undefined;
        "aria-multiline"?: (boolean | "true" | "false") | undefined;
        "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
        "aria-owns"?: string | undefined | undefined;
        "aria-placeholder"?: string | undefined | undefined;
        "aria-posinset"?: number | undefined | undefined;
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
        "aria-readonly"?: (boolean | "true" | "false") | undefined;
        "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
        "aria-required"?: (boolean | "true" | "false") | undefined;
        "aria-roledescription"?: string | undefined | undefined;
        "aria-rowcount"?: number | undefined | undefined;
        "aria-rowindex"?: number | undefined | undefined;
        "aria-rowindextext"?: string | undefined | undefined;
        "aria-rowspan"?: number | undefined | undefined;
        "aria-selected"?: (boolean | "true" | "false") | undefined;
        "aria-setsize"?: number | undefined | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
        "aria-valuemax"?: number | undefined | undefined;
        "aria-valuemin"?: number | undefined | undefined;
        "aria-valuenow"?: number | undefined | undefined;
        "aria-valuetext"?: string | undefined | undefined;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined | undefined;
        onCopy?: React__default.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCopyCapture?: React__default.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCut?: React__default.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCutCapture?: React__default.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPaste?: React__default.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPasteCapture?: React__default.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCompositionEnd?: React__default.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionEndCapture?: React__default.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStart?: React__default.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStartCapture?: React__default.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdate?: React__default.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdateCapture?: React__default.CompositionEventHandler<HTMLButtonElement> | undefined;
        onFocus?: React__default.FocusEventHandler<HTMLButtonElement> | undefined;
        onFocusCapture?: React__default.FocusEventHandler<HTMLButtonElement> | undefined;
        onBlur?: React__default.FocusEventHandler<HTMLButtonElement> | undefined;
        onBlurCapture?: React__default.FocusEventHandler<HTMLButtonElement> | undefined;
        onChange?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onChangeCapture?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInput?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInputCapture?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onInput?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onInputCapture?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onReset?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onResetCapture?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onSubmit?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onSubmitCapture?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onInvalid?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onInvalidCapture?: React__default.FormEventHandler<HTMLButtonElement> | undefined;
        onLoad?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onError?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onErrorCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onKeyDown?: React__default.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyDownCapture?: React__default.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPress?: React__default.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPressCapture?: React__default.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUp?: React__default.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUpCapture?: React__default.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onAbort?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onAbortCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlay?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThrough?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThroughCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChange?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChangeCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptied?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptiedCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onEncrypted?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onEncryptedCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onEnded?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onEndedCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedData?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedDataCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadata?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadataCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStart?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStartCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onPause?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onPauseCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlay?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlaying?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayingCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onProgress?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onProgressCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChange?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChangeCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onResize?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onResizeCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeked?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekedCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeking?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekingCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onStalled?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onStalledCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspend?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspendCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdate?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdateCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChange?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChangeCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onWaiting?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onWaitingCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onAuxClick?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onAuxClickCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onClickCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenu?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenuCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClick?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClickCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onDrag?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnd?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEndCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnter?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnterCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragExit?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragExitCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeave?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeaveCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragOver?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragOverCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragStart?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDragStartCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDrop?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onDropCapture?: React__default.DragEventHandler<HTMLButtonElement> | undefined;
        onMouseDown?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseDownCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseEnter?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseLeave?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMove?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMoveCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOut?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOutCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOver?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOverCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUp?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUpCapture?: React__default.MouseEventHandler<HTMLButtonElement> | undefined;
        onSelect?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onSelectCapture?: React__default.ReactEventHandler<HTMLButtonElement> | undefined;
        onTouchCancel?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchCancelCapture?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEnd?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEndCapture?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMove?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMoveCapture?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStart?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStartCapture?: React__default.TouchEventHandler<HTMLButtonElement> | undefined;
        onPointerDown?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerDownCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMove?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMoveCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUp?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUpCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancel?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancelCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerEnter?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerLeave?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOver?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOverCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOut?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOutCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCaptureCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCaptureCapture?: React__default.PointerEventHandler<HTMLButtonElement> | undefined;
        onScroll?: React__default.UIEventHandler<HTMLButtonElement> | undefined;
        onScrollCapture?: React__default.UIEventHandler<HTMLButtonElement> | undefined;
        onWheel?: React__default.WheelEventHandler<HTMLButtonElement> | undefined;
        onWheelCapture?: React__default.WheelEventHandler<HTMLButtonElement> | undefined;
        onAnimationStart?: React__default.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationStartCapture?: React__default.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEnd?: React__default.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEndCapture?: React__default.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIteration?: React__default.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIterationCapture?: React__default.AnimationEventHandler<HTMLButtonElement> | undefined;
        onToggle?: React__default.ToggleEventHandler<HTMLButtonElement> | undefined;
        onBeforeToggle?: React__default.ToggleEventHandler<HTMLButtonElement> | undefined;
        onTransitionCancel?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionCancelCapture?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionEnd?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionEndCapture?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionRun?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionRunCapture?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionStart?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionStartCapture?: React__default.TransitionEventHandler<HTMLButtonElement> | undefined;
        type?: "submit" | "reset" | "button" | undefined | undefined;
        name?: string | undefined | undefined;
    } & {
        as?: "button" | undefined;
        children?: React__default.ReactNode | ((bag: {
            open: boolean;
            active: boolean;
            hover: boolean;
            focus: boolean;
            disabled: boolean;
            autofocus: boolean;
        }) => React__default.ReactElement);
        refName?: string;
    } & {
        className?: string | ((bag: {
            open: boolean;
            active: boolean;
            hover: boolean;
            focus: boolean;
            disabled: boolean;
            autofocus: boolean;
        }) => string) | undefined;
    } & {
        disabled?: boolean;
        autoFocus?: boolean;
    } & React__default.RefAttributes<HTMLButtonElement>>;
    var Menu: typeof DropdownMenu;
    var Item: React__default.ForwardRefExoticComponent<{
        as?: "button" | "li";
        className?: string;
        disabledClassName?: string;
        activeClassName?: string;
        disabled?: boolean;
    } & React__default.ButtonHTMLAttributes<HTMLButtonElement> & React__default.HTMLAttributes<HTMLLIElement> & React__default.RefAttributes<HTMLButtonElement>>;
    var displayName: string;
}

export { Dropdown, type DropdownProps };
