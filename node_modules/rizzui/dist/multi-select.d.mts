import * as react_jsx_runtime from 'react/jsx-runtime';
import React__default from 'react';
import { Listbox } from '@headlessui/react';
import { l as labelStyles } from './label-size-BLtICllx.mjs';
import { E as ExtractProps } from './extract-props-Dt89k7WT.mjs';

type Align = 'start' | 'end';
type Side = 'top' | 'right' | 'bottom' | 'left';
type TheirPlacementType = `${Side}` | `${Side}-${Align}`;
type OurPlacementType = `${Side}` | `${Side} ${Align}`;
declare const ourPlacementObject: {
    [key in TheirPlacementType]: OurPlacementType;
};

declare const selectStyles: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        readonly none: "rounded-none";
        readonly sm: "rounded-sm";
        readonly md: "rounded-md";
        readonly lg: "rounded-lg";
        readonly pill: "rounded-full";
    };
    prefix: {
        size: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    suffix: {
        size: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    variant: {
        text: string;
        flat: string;
        outline: string;
    };
};
declare const optionListStyles: {
    base: string;
    shadow: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        pill: string;
    };
    item: {
        size: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        rounded: {
            none: string;
            sm: string;
            md: string;
            lg: string;
            pill: string;
        };
    };
    inPortal: string;
    notInPortal: string;
};
type MultiSelectOption = {
    label: string;
    value: string;
    disabled?: boolean;
    [key: string]: any;
};
type MultiSelectProps<MultiSelectOption> = ExtractProps<typeof Listbox> & {
    /** The value of the select */
    value?: string[];
    /** The class name of the select */
    className?: string;
    /** Whether the select is focused by default or not */
    autoFocus?: boolean;
    /** The default value of the select */
    defaultValue?: string[];
    /** The function to call when the value changes */
    onChange?: (value: string[]) => void;
    /** The function to call when the clear button is clicked */
    onClear?: () => void;
    /** Event of the searchable input when change */
    onSearchChange?: (value: string) => void;
    /** Whether the select is disabled */
    disabled?: boolean;
    /** The placeholder of the select */
    placeholder?: string;
    /** The size of the select */
    size?: keyof typeof selectStyles.size;
    /** The label of the select */
    label?: React__default.ReactNode;
    /** The weight of the label */
    labelWeight?: keyof typeof labelStyles.weight;
    /** The class name of the label */
    labelClassName?: string;
    /** The class name of the select */
    selectClassName?: string;
    /** The class name of the helper text */
    helperClassName?: string;
    /** The class name of the error */
    errorClassName?: string;
    /** The error of the select */
    error?: string;
    /** Whether the select is in the portal */
    inPortal?: boolean;
    /** The variant of the select */
    variant?: keyof typeof selectStyles.variant;
    /** The rounded of the select */
    rounded?: keyof typeof selectStyles.rounded;
    /** The shadow of the select */
    shadow?: keyof typeof optionListStyles.shadow;
    /** The prefix of the select */
    prefix?: React__default.ReactNode;
    /** The suffix of the select */
    suffix?: React__default.ReactNode;
    /** The class name of the prefix */
    prefixClassName?: string;
    /** The class name of the selected item */
    selectedItemClassName?: string;
    /** The class name of the suffix */
    suffixClassName?: string;
    /** Whether the select is clearable */
    clearable?: boolean;
    /** The placement of the select */
    placement?: keyof typeof ourPlacementObject;
    /** The gap of the select */
    gap?: number;
    /** The modal of the select */
    modal?: boolean;
    /** The helper text of the select */
    helperText?: React__default.ReactNode;
    /** The class name of the dropdown */
    dropdownClassName?: string;
    /** The class name of the search */
    searchClassName?: string;
    /** The class name of the search container */
    searchContainerClassName?: string;
    /** The class name of the search prefix */
    searchPrefixClassName?: string;
    /** The class name of the search suffix */
    searchSuffixClassName?: string;
    /** The place holder of the search */
    searchPlaceHolder?: string;
    /** The search suffix */
    searchSuffix?: React__default.ReactNode;
    /** The search prefix */
    searchPrefix?: React__default.ReactNode;
    /** Whether the search is disabled */
    searchDisabled?: boolean;
    /** Whether the search is read only */
    searchReadOnly?: boolean;
    /** The type of the search */
    searchType?: 'text' | 'search';
    /** The props of the search */
    searchProps?: React__default.InputHTMLAttributes<HTMLInputElement>;
    /** Whether the select is searchable or not */
    searchable?: boolean;
    /** Options for select */
    options: MultiSelectOption[];
    /** The class name of the option */
    optionClassName?: string;
    /** The option checkbox defines the option with checkbox or not */
    optionCheckBox?: boolean;
    /** The class name of the selected option */
    selectedOptionClassName?: string;
    /** The key to get the value of the option */
    getOptionValueKey?: string;
    /** Whether to hide the picked options */
    hideSelectedOptions?: boolean;
    /** The class name of the selected value container */
    selectContainerClassName?: string;
    /** The key to search in the options */
    searchByKey?: string;
    /** Whether the search input is sticky or not */
    stickySearch?: boolean;
    /**
     * A function to determine the display value of the selected item.
     * @param selectedItems - An array of selected items.
     * @param handleClearItem - The function to remove the targeted item from selected.
     * @returns React node to display for the selected item.
     */
    displayValue?: (selectedItems: string[], options: MultiSelectOption[], handleClearItem?: (item: string) => void) => React__default.ReactNode;
    /**
     * Use this function when you want to display something other than the default option displayValue.
     * @param option - The MultiSelectOption for which to get the display value.
     * @param selected - The Selected for which to know the item is selected or not.
     * @returns React node to display for the specified option.
     */
    getOptionDisplayValue?(option: MultiSelectOption, selected: boolean): React__default.ReactNode;
};
declare function MultiSelect<OptionType extends MultiSelectOption>({ gap, modal, value, error, label, options, onClear, onChange, disabled, clearable, className, autoFocus, helperText, size, searchProps, stickySearch, displayValue, shadow, prefix, labelClassName, onSearchChange, errorClassName, rounded, inPortal, selectClassName, helperClassName, prefixClassName, suffixClassName, searchClassName, optionClassName, defaultValue, dropdownClassName, searchable, variant, searchSuffix, searchType, selectedItemClassName, getOptionDisplayValue, searchByKey, optionCheckBox, searchPrefixClassName, searchSuffixClassName, labelWeight, searchDisabled, searchReadOnly, selectedOptionClassName, searchContainerClassName, selectContainerClassName, placeholder, hideSelectedOptions, placement, getOptionValueKey, searchPlaceHolder, suffix, searchPrefix, ...props }: MultiSelectProps<OptionType>): react_jsx_runtime.JSX.Element;

export { MultiSelect, type MultiSelectOption, type MultiSelectProps };
