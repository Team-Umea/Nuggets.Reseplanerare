import React__default from 'react';
import { l as labelStyles } from './label-size-BLtICllx.mjs';

declare const inputStyles: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        readonly none: "rounded-none";
        readonly sm: "rounded-sm";
        readonly md: "rounded-md";
        readonly lg: "rounded-lg";
        readonly pill: "rounded-full";
    };
    variant: {
        text: string;
        flat: string;
        outline: string;
    };
};
interface InputProps extends Omit<React__default.InputHTMLAttributes<HTMLInputElement>, 'size' | 'type' | 'prefix' | 'suffix'> {
    /** This Input component only support these types */
    type?: 'text' | 'email' | 'number' | 'tel' | 'search' | 'url' | 'time' | 'date' | 'week' | 'month' | 'datetime-local';
    /** The variants of the component are: */
    variant?: keyof typeof inputStyles.variant;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof inputStyles.size;
    /** The rounded variants are: */
    rounded?: keyof typeof inputStyles.rounded;
    /** Set input placeholder text */
    placeholder?: string;
    /** Whether the input is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Set font weight for label */
    labelWeight?: keyof typeof labelStyles.weight;
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** The prefix is design for adding any icon or text on the Input field's start (it's a left icon for the `ltr` and right icon for the `rtl`) */
    prefix?: React__default.ReactNode;
    /** The suffix is design for adding any icon or text on the Input field's end (it's a right icon for the `ltr` and left icon for the `rtl`) */
    suffix?: React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Override default CSS style of label */
    labelClassName?: string;
    /** Override default CSS style of input */
    inputClassName?: string;
    /** Override default CSS style of prefix */
    prefixClassName?: string;
    /** Override default CSS style of suffix */
    suffixClassName?: string;
    /** Override default CSS style of helperText */
    helperClassName?: string;
    /** Override default CSS style of error message */
    errorClassName?: string;
    /** Add custom classes to the root of the component */
    className?: string;
}
declare const Input: React__default.ForwardRefExoticComponent<InputProps & React__default.RefAttributes<HTMLInputElement>>;

export { Input, type InputProps };
