import * as react_jsx_runtime from 'react/jsx-runtime';
import React__default from 'react';

declare const modalStyles: {
    overlay: string;
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
        full: string;
    };
    rounded: {
        none: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
};
type ModalSize = 'sm' | 'md' | 'lg' | 'xl' | 'full';
type ModalProps = {
    /** Whether the Modal is open or not */
    isOpen: boolean;
    /** Called when modal is closed (Escape key and click outside, depending on options) */
    onClose(): void;
    /** Preset size of modal is sm, DEFAULT, lg, xl, full */
    size?: ModalSize;
    /** The rounded variants are: */
    rounded?: keyof typeof modalStyles.rounded;
    /** Size prop will not work when you are using customSize prop. Here is the example of using this prop -> customSize="500px" or customSize="90%" */
    customSize?: string;
    /** This prop will remove extra padding spacing from screen */
    noGutter?: boolean;
    /** Override default CSS style of Modal's overlay */
    overlayClassName?: string;
    /** Set custom style classes for the Modal container, where you can set custom Modal size and padding and background color */
    containerClassName?: string;
    /** Set custom style classes for the Modal root element */
    className?: string;
};
/**
 * A fully-managed renderless Modal component. When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use Modal to create a new floating layer over the current page to get user feedback or display information.
 */
declare function Modal({ isOpen, onClose, size, rounded, noGutter, customSize, overlayClassName, containerClassName, className, children, }: React__default.PropsWithChildren<ModalProps>): react_jsx_runtime.JSX.Element;
declare namespace Modal {
    var displayName: string;
}

export { Modal, type ModalProps, type ModalSize };
