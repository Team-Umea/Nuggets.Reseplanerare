import * as react_jsx_runtime from 'react/jsx-runtime';
import React__default from 'react';

declare const lineClasses: {
    base: string;
    top: {
        noDot: {
            sm: string;
            md: string;
            lg: string;
        };
        dot: {
            sm: string;
            md: string;
            lg: string;
        };
    };
    titleLine: string;
    color: {
        primary: string;
        secondary: string;
        danger: string;
        info: string;
        success: string;
        warning: string;
    };
};
declare const circleClasses: {
    base: string;
    size: {
        sm: string;
        md: string;
        lg: string;
    };
    waiting: string;
    variant: {
        solid: {
            base: string;
            color: {
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
        outline: {
            base: string;
            color: {
                primary: string;
                secondary: string;
                danger: string;
                info: string;
                success: string;
                warning: string;
            };
        };
    };
};
interface StepProps extends Omit<React__default.HTMLAttributes<HTMLDivElement>, 'title'> {
    /** Give a title for the step */
    title: React__default.ReactNode;
    /** Give a description for the step */
    description?: React__default.ReactNode;
    /** Pass custom icon */
    icon?: React__default.ReactNode;
    /** Index number for each component. Handled underneath by `Stepper` component */
    index?: number;
    /** Status of each step */
    status?: 'waiting' | 'in-progress' | 'completed' | 'error';
    /** The size of each Step */
    size?: keyof typeof circleClasses.size;
    /** The variants of the component are: */
    variant?: keyof typeof circleClasses.variant;
    /** Change Step Color */
    color?: keyof typeof lineClasses.color;
    /** Whether to show dot. Handled from `Stepper` component */
    dot?: boolean;
    /** Pass className to design the container */
    className?: string;
    /** Pass circleClassName to design the rounded disc */
    circleClassName?: string;
    /** Pass contentClassName to design the content area */
    contentClassName?: string;
    /** Pass titleClassName to design the label or title */
    titleClassName?: string;
    /** Pass descriptionClassName to design the description */
    descriptionClassName?: string;
}
declare function Step({ title, description, icon, index, status, size, variant, color, dot, className, circleClassName, contentClassName, titleClassName, descriptionClassName, }: StepProps): react_jsx_runtime.JSX.Element;
declare namespace Step {
    var displayName: string;
}

interface StepperProps extends React__default.HTMLAttributes<HTMLDivElement> {
    /** Index of currently active step */
    currentIndex?: number;
    /** Direction of stepper */
    direction?: 'horizontal' | 'vertical';
    /** Whether to show dot */
    dot?: boolean;
    /** Pass Step Component as children */
    children: React__default.ReactNode;
    /** Pass dotClassName to design the rounded disc */
    dotClassName?: string;
    /** Pass contentClassName to design the content area */
    contentClassName?: string;
    /** Pass titleClassName to design the label or title */
    titleClassName?: string;
    /** Pass descriptionClassName to design the description */
    descriptionClassName?: string;
}
/**
 * Stepper tool is used to enlighten user regarding the progress of the task.
 * `Stepper` component displays the progress of the task in a sequence of numbered steps through `Step` component.
 */
declare function Stepper({ currentIndex, children, direction, dot, className, titleClassName, dotClassName, contentClassName, descriptionClassName, }: StepperProps): react_jsx_runtime.JSX.Element;
declare namespace Stepper {
    var Step: typeof Step;
    var displayName: string;
}

export { Stepper, type StepperProps };
