import * as react_jsx_runtime from 'react/jsx-runtime';
import React__default from 'react';
import { Listbox } from '@headlessui/react';
import { E as ExtractProps } from './extract-props-Dt89k7WT.js';
import { l as labelStyles } from './label-size-BLtICllx.js';
import { d as dropdownStyles } from './dropdown-list-style-D3U7Mqrm.js';

type Align = 'start' | 'end';
type Side = 'top' | 'right' | 'bottom' | 'left';
type TheirPlacementType = `${Side}` | `${Side}-${Align}`;

declare const selectStyles: {
    base: string;
    disabled: string;
    error: string;
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        readonly none: "rounded-none";
        readonly sm: "rounded-sm";
        readonly md: "rounded-md";
        readonly lg: "rounded-lg";
        readonly pill: "rounded-full";
    };
    prefix: {
        size: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    suffix: {
        size: {
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    variant: {
        text: string;
        flat: string;
        outline: string;
    };
};
type SelectOption = {
    value: string | number;
    label: string;
    disabled?: boolean;
    [key: string]: any;
};
type SelectProps<SelectOption> = ExtractProps<typeof Listbox> & {
    /** Options for select */
    options: SelectOption[];
    /** Whether the select is disabled */
    disabled?: boolean;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Set font weight for label */
    labelWeight?: keyof typeof labelStyles.weight;
    /** Set select placeholder text */
    placeholder?: string;
    /** The size of the component. `"sm"` is equivalent to the dense select styling. */
    size?: keyof typeof selectStyles.size;
    /** The rounded variants are: */
    rounded?: keyof typeof selectStyles.rounded;
    /** The variants of the component are: */
    variant?: keyof typeof selectStyles.variant;
    /** The shadow variants of the component are: */
    shadow?: keyof typeof dropdownStyles.shadow;
    /** add clearable option */
    clearable?: boolean;
    /** Whether the select is focused by default or not */
    autoFocus?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** Event of the searchable input when change */
    onSearchChange?: (value: string) => void;
    /** The prefix is design for adding any icon or text on the select field's start (it's a left icon for the `ltr` and right icon for the `rtl`) */
    prefix?: React__default.ReactNode;
    /** The suffix is design for adding any icon or text on the select field's end (it's a right icon for the `ltr` and left icon for the `rtl`) */
    suffix?: React__default.ReactNode;
    /** Whether the select is searchable or not */
    searchable?: boolean;
    /** The type of the search input */
    searchType?: 'text' | 'search';
    /** The props for the search input */
    searchProps?: React__default.InputHTMLAttributes<HTMLInputElement>;
    /** The prefix for the search input */
    searchPrefix?: React__default.ReactNode;
    /** The suffix for the search input */
    searchSuffix?: React__default.ReactNode;
    /** Whether the search input is disabled */
    searchDisabled?: boolean;
    /** Whether the search input is readonly */
    searchReadOnly?: boolean;
    /** Add custom classes for search input */
    searchClassName?: string;
    /** Set search input placeholder text */
    searchPlaceHolder?: string;
    /** Add search prefix custom style */
    searchPrefixClassName?: string;
    /** Add search suffix custom style */
    searchSuffixClassName?: string;
    /** Add search container custom style */
    searchContainerClassName?: string;
    /** Whether it is rendered on the portal or not */
    inPortal?: boolean;
    /** Show error message using this prop */
    error?: string;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Add custom classes for container */
    className?: string;
    /** Define the position of dropdown */
    placement?: TheirPlacementType;
    /** Define the gap between the selected and dropdown */
    gap?: number;
    /** Whether it is rendered on the modal or not */
    modal?: boolean;
    /** Use labelClassName prop to do some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for select */
    selectClassName?: string;
    /** Add custom classes to select option */
    optionClassName?: string;
    /** Override default CSS style of prefix */
    prefixClassName?: string;
    /** Override default CSS style of suffix */
    suffixClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** This prop allows you to customize the helper text message style */
    helperClassName?: string;
    /** This prop allows you to customize the Options Wrapper style */
    dropdownClassName?: string;
    /** The key to search in the options */
    searchByKey?: string;
    /** Disable default filter */
    disableDefaultFilter?: boolean;
    /** Whether the search input is sticky or not */
    stickySearch?: boolean;
    /**
     * A function to determine the display value of the selected item.
     * @param value - The value of the selected item.
     * @returns React node to display for the selected item.
     */
    displayValue?(value: ExtractProps<typeof Listbox>['value']): React__default.ReactNode;
    /**
     * Use this function when you want to display something other than the default displayValue.
     * @param option - The SelectOption for which to get the display value.
     * @returns React node to display for the specified option.
     */
    getOptionDisplayValue?(option: SelectOption): React__default.ReactNode;
    /**
     * Select whether the label or value should be returned in the onChange method.
     * @param option - The SelectOption for which to get the value.
     * @returns The selected value from the specified option.
     */
    getOptionValue?: (option: SelectOption) => SelectOption[keyof SelectOption] | SelectOption;
};
declare function Select<OptionType extends SelectOption>({ label, labelWeight, error, options, disabled, autoFocus, helperText, prefix, placeholder, inPortal, modal, displayValue, getOptionDisplayValue, getOptionValue, value, onClear, clearable, placement, gap, size, rounded, shadow, variant, suffix, searchable, searchType, searchProps, stickySearch, searchPrefix, searchSuffix, searchDisabled, searchReadOnly, onSearchChange, searchPlaceHolder, className, searchByKey, labelClassName, selectClassName, optionClassName, suffixClassName, prefixClassName, errorClassName, helperClassName, searchClassName, dropdownClassName, disableDefaultFilter, searchPrefixClassName, searchSuffixClassName, searchContainerClassName, ...props }: SelectProps<OptionType>): react_jsx_runtime.JSX.Element;
declare namespace Select {
    var displayName: string;
}

export { Select, type SelectOption, type SelectProps };
