import React__default from 'react';
import { l as labelStyles } from './label-size-BLtICllx.mjs';

declare const textareaStyles: {
    base: string;
    scrollBar: string;
    disabled: string;
    clearable: string;
    error: string;
    size: {
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    rounded: {
        readonly none: "rounded-none";
        readonly sm: "rounded-sm";
        readonly md: "rounded-md";
        readonly lg: "rounded-lg";
        readonly pill: "rounded-full";
    };
    variant: {
        text: string;
        flat: string;
        outline: string;
    };
};
interface TextareaProps extends React__default.DetailedHTMLProps<React__default.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement> {
    /** Set custom rows */
    rows?: number;
    /** Set custom cols */
    cols?: number;
    /** Set custom max length of character */
    maxLength?: number;
    /** Whether the textarea is disabled */
    disabled?: boolean;
    /** Default value in textarea */
    children?: React__default.ReactNode;
    /** The size of the component. `"sm"` is equivalent to the dense input styling. */
    size?: keyof typeof textareaStyles.size;
    /** The variants of the component are: */
    variant?: keyof typeof textareaStyles.variant;
    /** Set field label */
    label?: React__default.ReactNode;
    /** Set font weight for label */
    labelWeight?: keyof typeof labelStyles.weight;
    /** add clearable option */
    clearable?: boolean;
    /** clear event */
    onClear?: (event: React__default.MouseEvent) => void;
    /** The rounded variants are: */
    rounded?: keyof typeof textareaStyles.rounded;
    /** It is the password visibility toggle icon.  */
    renderCharacterCount?({ characterCount, maxLength, }: {
        characterCount?: number;
        maxLength?: number;
    }): React__default.ReactNode;
    /** Add helper text. It could be string or a React component */
    helperText?: React__default.ReactNode;
    /** Show error message using this prop */
    error?: string;
    /** Use labelClassName prop to do some addition style for the field label */
    labelClassName?: string;
    /** Add custom classes for the input filed extra style */
    textareaClassName?: string;
    /** This prop allows you to customize the helper message style */
    helperClassName?: string;
    /** This prop allows you to customize the error message style */
    errorClassName?: string;
    /** Add custom classes to the root of the component */
    className?: string;
}
declare const Textarea: React__default.ForwardRefExoticComponent<Omit<TextareaProps, "ref"> & React__default.RefAttributes<HTMLTextAreaElement>>;

export { Textarea, type TextareaProps };
